<script generate>
  let upNext = ""

  var md = require('markdown-it')().use(require('markdown-it-highlightjs')).use(require('markdown-it-custom-block'), {
    upNext(arg) {
      upNext = arg
      return ""
    },
  });
  const path = require("path");
  let docs;

  const fs = require("fs");

  const docsDir = inputs.frontMatter.docsDir

  if (!inputs.triggeredBy) {
    // get absolute paths to data files
    docs = getDataFileNames(docsDir + "/**/*.md");
  } else {
    if (inputs.triggeredBy.reason != "Deleted") {
      docs = [inputs.triggeredBy.path];
    } else {
      // else ignore deleted data files.
      resolve();
      return;
    }
  }

  let mapped = docs.map((filepath) => {
    const raw = fs.readFileSync(filepath, "utf8");
    const content = frontMatterParse(raw);
    upNext = ""
    const html = md.render(content.body);
    const title = content.attributes.title;
    const order = content.attributes.order;
    // Use our data paths to specify output paths.
    // Data dir is the absolute path to our data dir
    // We also truncate the '.md' of path names.
    const relPath = filepath.split(dataDir + "/" +
      docsDir + "/")[1].slice(0, -3);
    return {
      path: relPath,
      data: {
        title: title,
        html: html,
        order: order,
        upNext: upNext.replace(/^\/+|\/+$/g, ''),
      },
    };
  });


  let toc

  if (inputs.triggeredBy) {
    const page = mapped[0]
    // for a single page, we need to restore
    // the toc from cache and update it
    toc = cache["toc"].data
    const index = toc.findIndex((item) => {
      return item.url == page.path;
    })
    let update = {
      url: page.path,
      title: page.data.title,
      order: page.order,
    }
    if (index == -1) {
      // must be a new page
      toc.push(update)
    } else {
      toc[index] = update;
    }
  } else {
    // a full update rebuilds the table of contents
    toc = mapped.map(item => {
      return {
        url: item.path,
        title: item.data.title,
        order: item.data.order,
      }
    });
  }

  toc.sort((a, b) => {
    return a.order - b.order
  })

  // store the toc in cache
  cache["toc"] = {
    data: toc,
  }

  // add table of contents to every page
  mapped = mapped.map(page => {
    if (page.data.upNext) {
      console.log(page.data.upNext)
      const index = toc.findIndex((item) => {
        return item.url == page.data.upNext;
      })
      console.log(index)
      if (index != -1) {
        page.data.upNextTitle = toc[index].title;
      }
    }
    page.data.pages = toc;
    return page
  });

  generate(mapped);

  resolve({
    watchGlobs: [docsDir + "/**/*.md"],
    cache: cache,
  });
</script>